# Compile to bitcode
llvm-gcc -emit-llvm -c sum.c -o sum.bc

# Compile to llvm assembly
llvm-gcc -emit-llvm -S sum.c

# Disassemble bitcode into sum.ll, which is identical to sum.s above
llvm-dis sum.bc

# We can also use clang
clang -emit-llvm -S sum.c

# Run our pass on bitcode
opt -load ../Release/lib/P1.so -printCode sum.bc -o sum.opt

# Compile bitcode to native assembly
llc sum.opt

# Load our pass during codegen
llc -load ../Release/lib/P1.so -regalloc=gc sum.bc  # Our pass defines a replacement register allocator

# phi nodes in SSA, to see them we must ask LLVM to promote memory to register:
opt -mem2reg sum.bc -o sum.opt
